@using QualityExperienceUI.Components.Pages.Monitoreo.Evaluacion.Components
@using QualityExperienceUI.Data.Models

<h3>ATRIBUTOS</h3>
<Collapse Animation>
    @foreach (var group in questions)
    {
        <Panel Key="@group.Id.ToString()">
            <HeaderTemplate>
                <div style="display: flex; justify-content: space-between; align-items: center">
                    <span>@group.Id</span>
                    <span>@group.Name</span>
                    @if (HasRadioQuestions(group))
                    {
                        <RadioGroup Options="@YesNo"
                                    Value="@groupResponses[group.Id]"
                                    OnChange="@(async (string value) => await HandleGroupRadioChange(group.Id, value))" />
                    }
                </div>
            </HeaderTemplate>
            <ChildContent>
                @foreach (var question in group.Questions)
                {
                    <div style="display: flex; justify-content: space-between; align-items: center; margin: 8px 0">
                        <p style="margin: 0">@question.name</p>
                        <div style="display: flex; justify-content: right; padding-right: 20px">
                            @if (IsRadioQuestion(question))
                            {
                                @if (!questionResponses.ContainsKey(question.id))
                                {
                                    questionResponses[question.id] = string.Empty;
                                }
                                <RadioGroup Options="@YesNo"
                                            Value="@questionResponses[question.id]"
                                            OnChange="@(async (string value) => await HandleQuestionRadioChange(group.Id, question.id, value))" />
                            }
                            else
                            {
                                @foreach (var questionItem in question.questionItems)
                                {
                                    <EvaluationType ControlType="@questionItem.controlType" Label="@questionItem.label" />
                                }
                            }
                        </div>
                    </div>
                    <Divider />

                }
            </ChildContent>
        </Panel>
    }
</Collapse>

@inject IQuestionsCRUD _questionsCRUD
@inject IApiMethods ApiMethods
@inject ApiMiddleware ApiMiddleware
@inject IMessageService _message

@code {
    [Parameter]
    public int templateID { get; set; }

    private Dictionary<int?, string> groupResponses = new();
    private Dictionary<int, string> questionResponses = new();

    private RadioOption<string>[] YesNo = new[]
    {
        new RadioOption<string> { Value = "Yes", Label = "Yes" },
        new RadioOption<string> { Value = "No", Label = "No" }
    };

    private List<GetQuestionsByTemplateIdDTO> questions = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            questions = await _questionsCRUD.GetQuestionsByTemplateIdAsync(templateID);

            if (questions != null)
            {
                foreach (var group in questions)
                {
                    groupResponses[group.Id] = string.Empty;

                    if (group.Questions != null)
                    {
                        foreach (var question in group.Questions)
                        {
                            if (IsRadioQuestion(question))
                            {
                                questionResponses[question.id] = string.Empty;
                            }
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await _message.Error($"Error al cargar las preguntas: {ex.Message}");
        }
    }

    private bool IsRadioQuestion(QuestionResponse question)
    {
        return question.questionEvaluationControl?.evaluationControl?.ToLower() == "radio";
    }

    private bool HasRadioQuestions(GetQuestionsByTemplateIdDTO group)
    {
        return group.Questions?.Any(q => IsRadioQuestion(q)) ?? false;
    }

    private async Task HandleGroupRadioChange(int groupId, string value)
    {
        try
        {
            groupResponses[groupId] = value;

            var group = questions.FirstOrDefault(g => g.Id == groupId);
            if (group?.Questions != null)
            {
                foreach (var question in group.Questions)
                {
                    if (IsRadioQuestion(question))
                    {
                        await HandleQuestionRadioChange(groupId, question.id, value, true);
                    }
                }
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            await _message.Error($"Error al actualizar el grupo: {ex.Message}");
        }
    }

    private async Task HandleQuestionRadioChange(int groupId, int questionId, string value, bool isFromGroup = false)
    {
        try
        {
            questionResponses[questionId] = value;

            if (!isFromGroup)
            {
                // Verificar si todas las preguntas de tipo Radio del grupo tienen el mismo valor
                var group = questions.FirstOrDefault(g => g.Id == groupId);
                if (group?.Questions != null)
                {
                    var radioQuestions = group.Questions.Where(IsRadioQuestion).ToList();
                    if (radioQuestions.Any())
                    {
                        bool allSameValue = radioQuestions.All(q =>
                            questionResponses.ContainsKey(q.id) &&
                            questionResponses[q.id] == value);

                        groupResponses[groupId] = allSameValue ? value : string.Empty;
                    }
                }
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            await _message.Error($"Error al actualizar la pregunta: {ex.Message}");
        }
    }
}
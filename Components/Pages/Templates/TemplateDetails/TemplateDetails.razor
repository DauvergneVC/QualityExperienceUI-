@* Usings *@
@using QualityExperienceUI.Components.Pages.Templates.TemplateDetails.Components
@using QualityExperienceUI.Components.Pages.Templates.TemplateDetails.Components.SubComponents



@* Page content *@
@page "/templates/details/{templateID:int}"

@if (isReady)
{
    @* Template infor & edit *@
    <TemplateInfoAndEdit templateList="template"
    templateState="templateState"
    templateType="templateType"
    calculationType="calculationType"
    allowAttachment="allowAttachment"
    feedbackType="feedbackType" 
    UpdateTemplate="HandleUpdateTemplateFromTemplateInfoAndEdit"/>

    <Divider />

    @* Tabs *@
    <Tabs DefaultActiveKey="1">

        <TabPane Key="1" Tab="Services & Campos">
            <Divider Orientation="DividerOrientation.Left" Text="Asociated services" />

            <TransferServices services="services" />


            <Divider Orientation="DividerOrientation.Left" Text="Context field types" />

            <AvailableFieldsComponent 
            contextFieldTypes="contextFieldTypes"
            _navigationManager="_navigationManager"
            OpenModalToCreate="OpenModalCreateField" />

            @* Modal to create *@
            <Modal
            Visible="@modalCreateContextField"
            OkText="@("Create")"
            OnOk="@HandleOk"
            OnCancel="@HandleCancel">
                <Header>
                    <span>Create context field Type</span>
                </Header>
                <ChildContent>
                    <CreateContextFieldTypeComponent @ref="createFieldComponent" />
                </ChildContent>
            </Modal>
            <br />
            <br />
        </TabPane>


        <TabPane Tab="Questions">
            <Divider Orientation="DividerOrientation.Left" Text="Questions List"/>

            @* Modal to Create Questions and groups questions *@
            <Button Type="ButtonType.Primary" OnClick="_=> modalCreateQuestion=true" >Create new Question</Button>

            <Modal Visible="@modalCreateQuestion"
            OkText="@("Create")"
            OnOk="@HandleCreateQuestion"
            OnCancel="@HandleCancel"
            Style="width: 750px; justify-content: center">
                <Header>
                    Create Question
                </Header>
                <ChildContent>
                    <CreateQuestionComponent @ref="createQuestionComponent" 
                        templateId="templateID"/>
                </ChildContent>
            </Modal>


            @* List Questions *@
            <ListQuestionComponent />
            @* <QuestionsComponent allDataOfQuestions="allDataOfQuestions" *@
            @* OpenEditQuestion="OpenModalTomodifyQuestion" /> *@


            @* Modal to Modify Questions and groups questions *@
            <Modal Visible="@modalModifyQuestion"
            OkText="@("Update")"
            OnOk="@HandleOkUpdateQuestion"
            OnCancel="@HandleCancel"
            Style="width: 750px; justify-content: center">
                <Header>
                    <span>Modify question: @questionToUpdate.name</span>
                </Header>
                <ChildContent>
                    <EditQuestionComponent 
                    questionToUpdate="questionToUpdate" 
                    groupsQuestionToUpdate="groupInfoToUpdateQuetion"
                    groups="groupsList"
                    templateId="templateID"/>
                </ChildContent>
            </Modal>
            <br />
            <br />
        </TabPane>

        <TabPane Tab="ComboBox">
            <br />
            <br />
            ComboBox
            <br />
            <br />
        </TabPane>

        <TabPane Tab="Note calculation">
            <br />
            <br />
            <CalculationNoteComponent />
            <br />
            <br />
        </TabPane>

        <TabPane Tab="Asigned users">
            <br />
            <br />
            <AsignedUsersComponent />
            <br />
            <br />
        </TabPane>

        <TabPane Tab="Maqueta">
            <br />
            <br />
            <Maqueta templateID="templateID" />
            <br />
            <br />
        </TabPane>
    </Tabs>

    <Divider />

    @* Delete buttons *@
    <Popconfirm Title="Are you sure delete this task?"
    OnConfirm="()=> SoftDelete()"
    OkText="Yes"
    CancelText="No">
        <a style="margin-left: 10px,color: blue;">SoftDelete</a>
    </Popconfirm>

    <br />

    <Popconfirm Title="Are you sure delete this task?"
    OnConfirm="()=> Delete()"
    OkText="Yes"
    CancelText="No">
        <a style="margin-left: 10px,color: blue;">RealDelete</a>
    </Popconfirm>
}


@* Injects *@
@inject IMessageService _message
@inject IApiMethods ApiMethods
@inject ApiMiddleware ApiMiddleware
@inject ModalService _modalService

@inject IContextFieldCRUD _contextFieldCrud
@inject IQuestionsCRUD _questionsCrud
@*To reload page*@
@inject NavigationManager uriHelper; 
@inject NavigationManager _navigationManager


@code {
    [Parameter]
    public int templateID { get; set; }
    // Vars
    private bool isReady = false;
    private static bool modalConfirm = true; /* Confirm delete buttons */
    private bool modalCreateContextField = false;
    private bool modalModifyQuestion = false;
    private bool modalCreateQuestion = false;
    // Send by paramters
    private TemplateListByIDDto template = new();
    private List<NameValuePair> templateState = new();
    private List<NameValuePair> templateType = new();
    private List<NameValuePair> calculationType = new();
    private List<NameValuePair> allowAttachment = new();
    private List<NameValuePair> feedbackType = new();
    public List<GetQuestionsByTemplateIdDTO>? allDataOfQuestions;
    private List<GetGroupListDTO> groupsList = new();

    private GetQuestionsByTemplateIdDTO groupInfoToUpdateQuetion = new();
    private Data.Models.GetModels.QuestionResponse questionToUpdate = new();
    List<GetServiceDTO>? services = new List<GetServiceDTO>();

    private List<GetContextFieldTypesDTO>? contextFieldTypes;


    // Methods
    protected override async Task OnInitializedAsync()
    { 
        try
        {
            // Requests
            contextFieldTypes = await _contextFieldCrud.GetContextFieldTypesBytemplate(templateID);
            allDataOfQuestions = await _questionsCrud.GetQuestionsByTemplateIdAsync(templateID);

            var templateResponce = await ApiMiddleware.ExecuteRequestAsync(() => ApiMethods.GetTemplatesByIDAsync(templateID));
            var templateOptions = await ApiMiddleware.ExecuteRequestAsync(() => ApiMethods.GetTemplateOptionsAsync());
            var servicesResponse = await ApiMiddleware.ExecuteRequestAsync(() => ApiMethods.GetServicesAsync());
            var groupsResponse = await ApiMiddleware.ExecuteRequestAsync(() => ApiMethods.GetGroupsAsync());
            if (!templateOptions.IsSuccess || !templateResponce.IsSuccess)
            {
                var Message = templateOptions.ErrorMessage != null ? templateOptions.ErrorMessage : templateResponce.ErrorMessage;
                _message.Error($"Error en la respuesta:\n {Message}");
            }
            else
            {
                template = templateResponce.Data;
                templateState = templateOptions.Data.TemplateStatus;
                templateType = templateOptions.Data.TemplateType;
                calculationType = templateOptions.Data.CalculationType;
                allowAttachment = templateOptions.Data.AllowAttachment;
                feedbackType = templateOptions.Data.FeedbackType;

                services = servicesResponse.Data;
                groupsList = groupsResponse.Data;
            }
            isReady = true;

        }
        catch (Exception ex)
        {
            await _message.Error(ex.Message);
        }
    }


    //Button Delete controls
    private async Task SoftDelete()
    {
        _modalService.Confirm(new ConfirmOptions()
            {
                Title = "Do you Want sure to delete these items?",
                Content = "Some descriptions",
                OnOk = onOk,
                OnCancel = onCancel
            });
        var response = ApiMiddleware.ExecuteRequestAsync(() => ApiMethods.SoftDeleteTemplate(templateID));
    }
    private async Task Delete()
    {
        _modalService.Confirm(new ConfirmOptions()
            {
                Title = "Do you Want to delete these items?",
                Content = "Some descriptions",
                OnOk = onOk,
                OnCancel = onCancel
            });
        var response = ApiMiddleware.ExecuteRequestAsync(() => ApiMethods.DeleteTemplate(templateID));
    }
    // Confirm modals
    Func<ModalClosingEventArgs, Task> onOk = (e) =>
    {
        modalConfirm = true;
        return Task.CompletedTask;
    };
    Func<ModalClosingEventArgs, Task> onCancel = (e) =>
    {

        return Task.CompletedTask;
    };


    // Handle components funcions
    private async Task HandleUpdateTemplateFromTemplateInfoAndEdit(TemplateUpdateDTO modelUpdate)
    {
        try
        {
            var response = await ApiMiddleware.ExecuteRequestAsync(() => ApiMethods.UpdateTemplateAsync(templateID, modelUpdate));
            if (!response.IsSuccess)
            {;
                _message.Error($"Error en la respuesta:\n {response.ErrorMessage}");
            }
            else
            {
                uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
            }

        }
        catch (Exception ex)
        {
            _message.Error($"Exepcion:\n {ex.Message}");
        }
    }

    // Handle create new context field type
    private void OpenModalCreateField()
    {
        modalCreateContextField = true;
    }

    private CreateContextFieldTypeComponent? createFieldComponent; // Form to create Fieldtype reference
    private async Task HandleOk()
    {
        // Valida el formulario en el componente hijo.
        var (isValid, formData) = await createFieldComponent.ValidateAndGetData();

        if (isValid)
        {
            var response = await _contextFieldCrud.PostContextFieldType(formData);
            if (response)
            {
                contextFieldTypes = await _contextFieldCrud.GetContextFieldTypesBytemplate(templateID);
                await _message.Success("Success");
                modalCreateContextField = false;
            }
        }
        else
        {
            _message.Warning("Form no validado");
        }
    }

    private void HandleCancel(MouseEventArgs e)
    {
        modalCreateContextField = false;
        modalModifyQuestion = false;
        modalCreateQuestion = false;
    }

    private void OpenModalTomodifyQuestion((GetQuestionsByTemplateIdDTO groupsInfo, Data.Models.GetModels.QuestionResponse question) allData)
    {
        groupInfoToUpdateQuetion = allData.groupsInfo;
        questionToUpdate = allData.question;
        modalModifyQuestion = true;
    }

    private async Task HandleOkUpdateQuestion()
    {

    }


    private CreateQuestionComponent? createQuestionComponent;
    private async Task HandleCreateQuestion()
    {
        try
        {
            var (isValid, formData) = await createQuestionComponent.ValidateAndGetData();
            if (isValid)
            {
                var response = await _questionsCrud.PostQuestionAsync(formData);
                if (response)
                {
                    allDataOfQuestions = await _questionsCrud.GetQuestionsByTemplateIdAsync(templateID);
                    await _message.Success("Success");
                    modalCreateQuestion = false;
                }
            }
            else
            {
                _message.Warning("Form no validado");
            }
        }
        catch (Exception ex)
        {
            _message.Warning(ex.Message);
        }
        
    }
    
}

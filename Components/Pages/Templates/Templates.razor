@* Usings *@
@using QualityExperienceUI.Data.Models
@using QualityExperienceUI.Components.Pages.Templates.Components;

@page "/templates"
@attribute [ReuseTabsPage(Title = "Templates")]

@* Page Content *@
<h2>@localizer["Title"]</h2>
@if (isReady)
{
    @* Filter *@
    <Filter clientsPair="clientsPair"
            templateState="templateState"
            templateType="templateType"
            FilterValuesSearchExecute="HandleSearchFilterButton"
            ClearTask="HandleClearFilterButton" />
    @* Table to show templates *@
    <TableTemplates templates="@templates" />

    @* Drawers for create template *@
    @* If para no cargar parametros del form hasta seleccionarlos *@
    <Button Icon="@IconType.Outline.Plus" Type="ButtonType.Primary" @onclick="_=>visible = true">@localizer["DrawerShowButton"]</Button>
    @if (visible)
    {
        <div>
            <Drawer Closable="true" Width="720" Visible="visible" Title="@(localizer["DrawerCreateTitle"].Value)" OnClose="_=>close()">
                <FormTemplate clientsPair="clientsPair"
                              templateType="templateType"
                              calculationType="calculationType"
                              allowAttachment="allowAttachment"
                              feedbackType="feedbackType"
                              OnTemplateCreated="OnTemplateCreated" />
            </Drawer>
        </div>
    }
}


@* Injects *@
@inject IApiMethods ApiMethods
@inject ApiMiddleware ApiMiddleware
@inject IMessageService _message
@inject NavigationManager NavigationManager
@inject IStringLocalizer<QualityExperienceUI.Local.TemplatesResources.Templates> localizer;


@code {
    // General vars
    private bool isReady = false;

    // Vars send by parameters
    Dictionary<string, int> clientsPair = new();
    private List<NameValuePair> templateState = new ();
    private List<NameValuePair> templateType = new ();

    // Parameters for create New templates
    private List<NameValuePair> calculationType = new();
    private List<NameValuePair> allowAttachment = new();
    private List<NameValuePair> feedbackType = new();

    // Templates lists
    IEnumerable<TemplateListDto>? templates = new List<TemplateListDto>();
    TemplateListDto? sendTemplateToUpdate = null;


    // Initialize all necesaries
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Obtain all values
            var responseClients = await ApiMiddleware.ExecuteRequestAsync(() => ApiMethods.GetClientsAsync());
            var responseTemplate = await ApiMiddleware.ExecuteRequestAsync(() => ApiMethods.GetTemplatesAsync());
            var templateOptions = await ApiMiddleware.ExecuteRequestAsync(() => ApiMethods.GetTemplateOptionsAsync());

            if (!responseTemplate.IsSuccess)
            {
                _message.Error($"Error en la respuesta:\n {responseTemplate.ErrorMessage}");
            }
            else
            {

                templates = responseTemplate.Data;
                // Charge Dictionary with clients values and names
                foreach (var client in responseClients.Data)
                {
                    clientsPair.Add(client.name, client.id);
                }
                templateState = templateOptions.Data.TemplateStatus;
                templateType = templateOptions.Data.TemplateType;
                calculationType = templateOptions.Data.CalculationType;
                allowAttachment = templateOptions.Data.AllowAttachment;
                feedbackType = templateOptions.Data.FeedbackType;
            }
            isReady = true;
        }
        catch (Exception ex)
        {
            _message.Error($"Exepcion:\n {ex.Message}");
        }
    }

    // Filter Controls
    private async Task HandleSearchFilterButton((int id, string? status, string? type, string? authorID, DateTime? startDate, DateTime? endDate) filterValues)
    {
        try
        {
            int id = filterValues.id;
            string? status = filterValues.status;
            string? type = filterValues.type;
            string? authorID = filterValues.authorID;
            DateTime? startDate = filterValues.startDate;
            DateTime? endDate = filterValues.endDate;

            var response = await ApiMiddleware.ExecuteRequestAsync(() => ApiMethods.GetTemplatesByFiltersAsync(id, status, type, authorID, startDate, endDate));
            if (!response.IsSuccess || response.Data == null)
            {
                var message = response.ErrorMessage != null ? response.ErrorMessage : localizer["NoTemplatesfound"];
                _message.Error($"Error en la respuesta:\n {message}");
            }
            else
            {
                templates = response.Data;
            }
        }
        catch (Exception ex)
        {
            _message.Error($"Exepcion:\n {ex.Message}");
        }
    }

    private async Task HandleClearFilterButton()
    {
        try
        {
            // reload templates
            var responseTemplate = await ApiMiddleware.ExecuteRequestAsync(() => ApiMethods.GetTemplatesAsync());
            if (!responseTemplate.IsSuccess)
            {
                _message.Error($"Error en la respuesta:\n {responseTemplate.ErrorMessage}");
            }
            else
            {

                templates = responseTemplate.Data;
            }
        } 
        catch (Exception ex)
        {
            _message.Error($"Exepcion:\n {ex.Message}");
        }
    }



    // Drawer necesaries
    // Vars
    private bool visible = false;
    private bool visibleEdit = false;

    // Voids
    private void close()
    {
        visible = false;
        visibleEdit = false;
        // clearTask();
    }

    // Events and clear
    private async Task OnTemplateCreated()
    {
        close();
    }

    private async Task OnTemplateUpdated()
    {
        close();
    }

    private async Task clearTask()
    {
        try
        {
            this.visible = false;
            // templates = null;

            var response = await ApiMiddleware.ExecuteRequestAsync(() => ApiMethods.GetTemplatesAsync());

            if (!response.IsSuccess)
            {
                _message.Error($"Error en la respuesta:\n {response.ErrorMessage}");
            }
            else
            {
                templates = response.Data;
            }

        }
        catch(Exception ex)
        {
            _message.Error($"Exepcion:\n {ex.Message}");

        }
    }

}

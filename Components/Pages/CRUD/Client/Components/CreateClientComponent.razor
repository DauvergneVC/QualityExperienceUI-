
@* Component Content *@
<h3>@localizer["ComponentFormCreateTitle"]</h3>

@* Form *@
<Form @ref="form"
Model="@formModel"
ValidateOnChange="true"
Size="FormSize.Small">

    @* Inputs and Selects *@
    <FormItem Label="@localizer["ComponentFormLabelName"]" Rules="@(FormValidationRules.textRules)">
        <Input @bind-Value="@formModel.name" />
    </FormItem>

    <FormItem Label="@localizer["ComponentFormLabelDescription"]" Rules="@(FormValidationRules.textRules)">
        <Input @bind-Value="@formModel.description" />
    </FormItem>

    <FormItem Label="@localizer["ComponentFormLabelCountryID"]" Rules="@(FormValidationRules.idRules)">
        <AntDesign.InputNumber @bind-Value="@formModel.countryID"/>
    </FormItem>

    @* Buttons *@
    <FormItem WrapperColOffset="8" WrapperColSpan="16">
        <Button Type="ButtonType.Primary" HtmlType="submit" @onclick="_=>CreateButtonAction()"> 
            @localizer["ComponentFormButtonCreate"]
        </Button> 
        <Button Type="ButtonType.Primary" HtmlType="Cancel" @onclick="_=>CancelButtonAction()" Danger>
            @localizer["ComponentFormButtonCancel"]
        </Button> 
    </FormItem>

</Form>

@code {
    // Parameters
    [Parameter] public IStringLocalizer? localizer { get; set; }
    [Parameter] public IMessageService? _message { get; set; }
    [Parameter] public EventCallback<PostClientDTO> CreateClient { get; set; }
    [Parameter] public EventCallback CancelClientCreation { get; set; }
    // Form
    private PostClientDTO formModel { get; set; } = new PostClientDTO();
    private Form<PostClientDTO>? form; // Para manejar el form y poder limpiarlo.


    // Buttons action
    private async Task CreateButtonAction()
    {
        if (!form.Validate())
        {
            await _message.Warning("Form no validado");
        }
        else
        {
            await CreateClient.InvokeAsync(formModel);
            form.Reset();
        }
    }

    private async Task CancelButtonAction()
    {
        form.Reset();
        await CancelClientCreation.InvokeAsync();
    }
}

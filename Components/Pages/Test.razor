@page "/test"
@using ClosedXML.Excel
@using CsvHelper
@using System.Text.Json
@using System.Globalization
@using QualityExperienceUI.Data.Models
@inject IJSRuntime JsRuntime
@inject IApiMethods ApiMethods
@inject ApiMiddleware ApiMiddleware

<InputFile OnChange="@LoadFile" accept=".csv,.xlsx" />

@code {
    // Input
    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        var file = e.File;
        string jsonResult;
        List<CreateGroupDTO> createGroups = new();

        if (file.Name.EndsWith(".csv"))
        {
            jsonResult = await ConvertCsvToJson(file);
            createGroups = await ConvertCsvToGroupDTO(file);
        }
        else
        {
            jsonResult = await ConvertExcelToJson(file);
        }


        await JsRuntime.InvokeVoidAsync("console.log", jsonResult);

        // createGroups = JsonSerializer.Deserialize<List<CreateGroupDTO>>(jsonResult);
        foreach (var group in createGroups)
        {
            var response = await ApiMiddleware.ExecuteRequestAsync(() => ApiMethods.CreateGroups(group));

            await JsRuntime.InvokeVoidAsync("console.log", group.name + group.templateID + group.authorID + group.order + group.parentID);

        }
    }


    // CSV
    public async Task<string> ConvertCsvToJson(IBrowserFile file)
    {
        using var stream = file.OpenReadStream();
        using var reader = new StreamReader(stream);

        // Configurar separador como ';'
        var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                Delimiter = ";"
            };

        using var csv = new CsvReader(reader, config);

        var records = new List<Dictionary<string, object>>();

        await foreach (var record in csv.GetRecordsAsync<dynamic>())
        {
            var dict = new Dictionary<string, object>();
            foreach (var key in ((IDictionary<string, object>)record).Keys)
            {
                dict[key] = ((IDictionary<string, object>)record)[key];
            }
            records.Add(dict);
        }

        return JsonSerializer.Serialize(records);
    }

    public async Task<List<CreateGroupDTO>> ConvertCsvToGroupDTO(IBrowserFile file)
    {
        using var stream = file.OpenReadStream();
        using var reader = new StreamReader(stream);

        var config = new CsvConfiguration(CultureInfo.InvariantCulture)
            {
                Delimiter = ";",
                HeaderValidated = null, // Opcional: para ignorar validación de cabeceras
                MissingFieldFound = null // Opcional: para ignorar campos faltantes
            };

        using var csv = new CsvReader(reader, config);

        var records = new List<CreateGroupDTO>();

        // Leer la primera fila como cabecera
        await csv.ReadAsync();
        csv.ReadHeader();

        while (await csv.ReadAsync())
        {
            try
            {
                var dto = new CreateGroupDTO
                    {
                        name = csv.GetField("name"),
                        description = csv.GetField("description"),
                        templateID = csv.GetField<int>("templateID"),
                        parentID = csv.GetField<int>("parentID"),
                        order = csv.GetField<int>("order"),
                        authorID = csv.GetField<int>("authorID")
                    };

                records.Add(dto);
            }
            catch (Exception ex)
            {
                await JsRuntime.InvokeVoidAsync("console.error",
                    $"Error en fila {csv.Parser.Row}: {ex.Message}");
            }
        }
        return records;
    }


    // ClosedXML  EXCEL
    private async Task<string> ConvertExcelToJson(IBrowserFile file)
    {
        using var memoryStream = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(memoryStream);
        memoryStream.Position = 0;

        using var workbook = new XLWorkbook(memoryStream);
        var worksheet = workbook.Worksheet(1);
        var rows = worksheet.RowsUsed().Skip(1); // skip cabecera

        var data = new List<XlsxModel>();

        foreach (var row in rows)
        {
            data.Add(new XlsxModel
                {
                    name = row.Cell(1).GetValue<string>(),
                    description = row.Cell(2).GetValue<string>(),
                    templateId = row.Cell(3).GetValue<int>(),
                    parentId = row.Cell(4).GetValue<int>(),
                    order = row.Cell(5).GetValue<int>(),
                    authorId = row.Cell(6).GetValue<int>()


                });
        }

        return JsonSerializer.Serialize(data);
    }
}
@using QualityExperienceUI.Data.Models
@using QualityExperienceUI.Data.Validations;


<h3>CreateIndicatorForm</h3>

<Form @ref="form"
Model="@_model"
ValidateOnChange="true"
Size="FormSize.Small">


    <FormItem Label="Nombre del indicador" Rules="@(FormValidationRules.textRules)">
        <Input @bind-Value="@_model.name" />
    </FormItem>
    <FormItem Label="Descripcion del indicador" Rules="@(FormValidationRules.textRules)">
        <Input @bind-Value="@_model.description" />
    </FormItem>
    <FormItem Label="Order" Rules="@(FormValidationRules.numericRules)">
        <AntDesign.InputNumber @bind-Value="@_model.order" />
    </FormItem>
    <FormItem Label="Tipo de indicador" Rules="@(FormValidationRules.textRules)">
        <Input @bind-Value="@_model.type" />
    </FormItem>
    <FormItem Label="Para calculo" Rules="@(FormValidationRules.numericRules)">
        <AntDesign.InputNumber @bind-Value="@_model.forCalculation" />
    </FormItem>
    <FormItem>
        <Button Type="ButtonType.Primary" OnClick="@CreateIndicator">Crear indicador</Button>
    </FormItem>
</Form>



@* Injects *@
@inject IApiMethods ApiMethods
@inject ApiMiddleware ApiMiddleware
@inject IMessageService _message

@code {
    private CreateIndicatorDTO _model { get; set; } = new CreateIndicatorDTO();
    private Form<CreateIndicatorDTO>? form;
    private bool formValidate = false;



    private async Task CreateIndicator()
    {
        try
        {
            formValidate = form.Validate();

            if (!formValidate)
            {
                _message.Warning("Form no validado");
            }
            else
            {
                var response = await ApiMiddleware.ExecuteRequestAsync(() => ApiMethods.Createindicator(_model));
                if (!response.IsSuccess)
                {
                    _message.Error(response.ErrorMessage);
                }
                else
                {
                    _message.Success("Indicador creado con exito");
                    form.Reset();
                }
            }
        }
        catch (Exception ex)
        {
            await _message.Error(ex.Message);

        }
    }
}

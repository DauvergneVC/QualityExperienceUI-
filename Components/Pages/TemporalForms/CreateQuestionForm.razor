@using QualityExperienceUI.Data.Models
@using QualityExperienceUI.Data.Validations
@using System.Text.Json
@inject IStringLocalizer<Local.Data.ToolTips.Tooltips> tooltipsLocalizer;


<h3>CreateQuestionForm</h3>

<Form @ref="form"
Model="@_model"
ValidateOnChange="true"
Size="FormSize.Small">


    <FormItem Label="Template asociado">
        <div style="display: flex; align-items: center;">
            <InputSelect @bind-Value="@_model.templateID" class="form-control" style="margin-left: 8px;">
                <option value="">Seleccione un template</option>
                @foreach (var item in templatesPair)
                {
                    <option value="@item.Value">@item.Key</option>
                }
            </InputSelect>
        </div>
    </FormItem>

    <FormItem Label="Id del grupo" Rules="@(FormValidationRules.idRules)">
        <AntDesign.InputNumber @bind-Value="@_model.groupID" />
    </FormItem>

    <FormItem Label="Id del sub grupo" Rules="@(FormValidationRules.idRules)">
        <AntDesign.InputNumber @bind-Value="@_model.subGroupID" />
    </FormItem>

    <FormItem Label="Id del autor" Rules="@(FormValidationRules.idRules)">
        <AntDesign.InputNumber @bind-Value="@_model.authorID" />
    </FormItem>

    <FormItem Label="Indicador">
        <div style="display: flex; align-items: center;">
            <InputSelect @bind-Value="@_model.indicatorID" class="form-control" style="margin-left: 8px;">
                <option value="">Seleccione un indicador</option>
                @foreach (var item in IndicatorsPair)
                {
                    <option value="@item.Value">@item.Key</option>
                }
            </InputSelect>
            <Tooltip Placement="Placement.Top" Title="@tooltipsLocalizer["Defaulth"]">
                <Icon Type="question" />
            </Tooltip>
        </div>
    </FormItem>

    <FormItem Label="Titulo de la pregunta" Rules="@(FormValidationRules.textRules)">
        <Input @bind-Value="@_model.title" />
    </FormItem>

    <FormItem Label="Descripcion de la pregunta" Rules="@(FormValidationRules.textRules)">
        <Input @bind-Value="@_model.description" />
    </FormItem>

    <FormItem Label="Orden" Rules="@(FormValidationRules.numericRules)">
        <AntDesign.InputNumber @bind-Value="@_model.order" />
    </FormItem>

    <FormItem Label="criticalQuestionValue" Rules="@(FormValidationRules.numericRules)">
        <div style="display: flex; align-items: center;">
            <AntDesign.InputNumber @bind-Value="@_model.criticalQuestionValue" />
            <Tooltip Placement="Placement.Top" Title="@tooltipsLocalizer["Defaulth"]">
                <Icon Type="question" />
            </Tooltip>
        </div>
    </FormItem>

    <FormItem Label="Type">
        <div style="display: flex; align-items: center;">
            <InputSelect @bind-Value="@_model.type" class="form-control" style="margin-left: 8px;">
                <option value="">Seleccione una opción</option>
                @foreach (var item in questionType)
                {
                    <option value="@item.Value">@item.Name</option>
                }
            </InputSelect>
            <Tooltip Placement="Placement.Top" Title="@tooltipsLocalizer["Defaulth"]">
                <Icon Type="question" />
            </Tooltip>
        </div>
    </FormItem>

    <FormItem Label="Status">
        <div style="display: flex; align-items: center;">
            <InputSelect @bind-Value="@_model.status" class="form-control" style="margin-left: 8px;">
                <option value="">Seleccione una opción</option>
                @foreach (var item in questionStatus)
                {
                    <option value="@item.Value">@item.Name</option>
                }
            </InputSelect>
            <Tooltip Placement="Placement.Top" Title="@tooltipsLocalizer["Defaulth"]">
                <Icon Type="question" />
            </Tooltip>
        </div>
    </FormItem>

    <FormItem Label="Critical_">
        <div style="display: flex; align-items: center;">
            <InputSelect @bind-Value="@_model.critical" class="form-control" style="margin-left: 8px;">
                <option value="">Seleccione una opción</option>
                @foreach (var item in criticalQuestion)
                {
                    <option value="@item.Value">@item.Name</option>
                }
            </InputSelect>
            <Tooltip Placement="Placement.Top" Title="@tooltipsLocalizer["Defaulth"]">
                <Icon Type="question" />
            </Tooltip>
        </div>
    </FormItem>

    <FormItem Label="Calculation type" >
        <div style="display: flex; align-items: center;">
            <InputSelect @bind-Value="@_model.calculationType" class="form-control" style="margin-left: 8px;">
                <option value="">Seleccione una opción</option>
                @foreach (var item in calculationQuestionType)
                {
                    <option value="@item.Value">@item.Name</option>
                }
            </InputSelect>
            <Tooltip Placement="Placement.Top" Title="@tooltipsLocalizer["Defaulth"]">
                <Icon Type="question" />
            </Tooltip>
        </div>
    </FormItem>

    <FormItem Label="GlobalWeight?" Rules="@(FormValidationRules.numericRules)">
        <div style="display: flex; align-items: center;">
            <AntDesign.InputNumber @bind-Value="@_model.globalWeight" />
            <Tooltip Placement="Placement.Top" Title="@tooltipsLocalizer["Defaulth"]">
                <Icon Type="question" />
            </Tooltip>
        </div>
    </FormItem>

    <FormItem Label="Indicator Weight?" Rules="@(FormValidationRules.numericRules)">
        <div style="display: flex; align-items: center;">
            <AntDesign.InputNumber @bind-Value="@_model.indicatorWeight" />
            <Tooltip Placement="Placement.Top" Title="@tooltipsLocalizer["Defaulth"]">
                <Icon Type="question" />
            </Tooltip>
        </div>
    </FormItem>

    <FormItem Label="Evaluation control">
        <div style="display: flex; align-items: center;">
            <InputSelect @bind-Value="@_model.calculationType" class="form-control" style="margin-left: 8px;">
                <option value="">Seleccione una opción</option>
                @foreach (var item in evaluationControl)
                {
                    <option value="@item.Value">@item.Name</option>
                }
            </InputSelect>
            <Tooltip Placement="Placement.Top" Title="@tooltipsLocalizer["Defaulth"]">
                <Icon Type="question" />
            </Tooltip>
        </div>
    </FormItem>

    <FormItem WrapperColOffset="8" WrapperColSpan="16">
        <Button Type="ButtonType.Primary" HtmlType="submit" Icon="@IconType.Outline.Plus" @onclick="_=>ButtonAction()">
            Crear pregunta
        </Button>
    </FormItem>
</Form>




@* Injects *@
@inject IApiMethods ApiMethods
@inject ApiMiddleware ApiMiddleware
@inject IMessageService _message

@code {
    private CreateQuestionsDTO _model { get; set; } = new CreateQuestionsDTO();
    private Form<CreateQuestionsDTO>? form;


    // Editable or possibles parameters
    Dictionary<string, int> templatesPair = new();
    Dictionary<string, int> IndicatorsPair = new();
    Dictionary<string, string> toolTips = new Dictionary<string, string>();

    [Parameter]
    public List<NameValuePair>? questionType { get; set; }
    [Parameter]
    public List<NameValuePair>? questionStatus { get; set; }
    [Parameter]
    public List<NameValuePair>? criticalQuestion { get; set; }
    [Parameter]
    public List<NameValuePair>? calculationQuestionType { get; set; }
    [Parameter]
    public List<NameValuePair>? evaluationControl { get; set; }



    protected override async Task OnInitializedAsync()
    {
        try
        {

            // Obtain all values
            var response = await ApiMiddleware.ExecuteRequestAsync(() => ApiMethods.GetTemplatesAsync());
            var responseIndicators = await ApiMiddleware.ExecuteRequestAsync(() => ApiMethods.Getindicators());

            if (!response.IsSuccess)
            {
                _message.Error($"Error en la respuesta:\n {response.ErrorMessage}");
            }
            else
            {
                // Charge templates with templates values and names
                foreach (var template in response.Data)
                {
                    templatesPair.Add(template.Name, template.Id);
                }

                // Charge indicators with indicators values and names
                foreach (var indicator in responseIndicators.Data)
                {
                    IndicatorsPair.Add(indicator.name, indicator.id);
                }

            }
        }
        catch (Exception ex)
        {
            _message.Error($"Exepcion:\n {ex.Message}");
        }
    }



    private async Task ButtonAction()
    {
        try
        {

            if (!form.Validate())
            {
                _message.Warning("Form no validado");
            }
            else
            {
                _model.createdAt = DateTime.Now;
                _model.updatedAt = DateTime.Now;
                var response = await ApiMiddleware.ExecuteRequestAsync(() => ApiMethods.CreateQuestion(_model));
                if (!response.IsSuccess)
                {
                    _message.Error(response.ErrorMessage);
                }
                else
                {
                    _message.Success("servicio creado con exito");
                    form.Reset();
                }
            }
        }
        catch (Exception ex)
        {
            await _message.Error(ex.Message);

        }
    }
}

@using QualityExperienceUI.Data.Models


@page "/temporal-forms"

<h2>TemporalForms</h2>


<CreateClientForm />

<CreateServiceForm />

<CreateServiceCategorieForm />

<CreateGroupForm />

<CreateIndicatorForm />

@* <CreateQuestionForm  *@
@* questionType="questionType" *@
@* questionStatus="questionStatus" *@
@* criticalQuestion="criticalQuestion" *@
@* calculationQuestionType="calculationQuestionType" *@
@* evaluationControl="evaluationControl"/> *@


@* Injects *@
@inject IApiMethods ApiMethods
@inject ApiMiddleware ApiMiddleware
@inject IJSRuntime jsRuntime

@code {
    // private List<OptionAutoValue> questionType { get; set; } = new();
    // private List<OptionAutoValue> questionStatus { get; set; } = new();
    // private List<OptionAutoValue> criticalQuestion { get; set; } = new();
    // private List<OptionAutoValue> calculationQuestionType { get; set; } = new();
    // private List<OptionAutoValue> evaluationControl { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        // try
        // {
        //     // Obtain all values
        //     var options = await ApiMiddleware.ExecuteRequestAsync(() => ApiMethods.GetQuestionsMetadataAsync());

        //     if (!options.IsSuccess)
        //     {
        //         jsRuntime.InvokeAsync<string>("console.log", options.ErrorMessage);
        //     }
        //     else
        //     {
        //         questionType = options.Data.questionType;
        //         questionStatus = options.Data.questionStatus;
        //         criticalQuestion = options.Data.criticalQuestion;
        //         calculationQuestionType = options.Data.calculationQuestionType;
        //         evaluationControl = options.Data.evaluationControl;

        //     }
        // }
        // catch (Exception ex)
        // {
        //     jsRuntime.InvokeAsync<string>("console.log", ex.Message);
        // }
    }
}

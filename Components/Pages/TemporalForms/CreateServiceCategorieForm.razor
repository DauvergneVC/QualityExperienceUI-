@using QualityExperienceUI.Data.Models
@using System.Text.Json;
@using QualityExperienceUI.Data.Validations;

<h3>CreateServiceCategorieForm</h3>

<Form @ref="form"
Model="@_model"
ValidateOnChange="true"
Size="FormSize.Small">

    <FormItem Label="Nombre de la categoria" Rules="@(FormValidationRules.textRules)">
        <Input @bind-Value="@_model.name" />
    </FormItem>

    <FormItem Label="Descripcion de la categoria" Rules="@(FormValidationRules.textRules)">
        <Input @bind-Value="@_model.description" />
    </FormItem>

    <FormItem Label="Order" Rules="@(FormValidationRules.numericRules)">
        <AntDesign.InputNumber @bind-Value="@_model.order" />
    </FormItem>

    <FormItem Label="Id del autor" Rules="@(FormValidationRules.numericRules)">
        <AntDesign.InputNumber @bind-Value="@_model.authorID" />
    </FormItem>


    <FormItem WrapperColOffset="8" WrapperColSpan="16">
        <Button Type="ButtonType.Primary" HtmlType="submit" Icon="@IconType.Outline.Plus" @onclick="_=>ButtonAction()">
            Crear categoria de servicio
        </Button>
    </FormItem>
</Form>




@* Injects *@
@inject IApiMethods ApiMethods
@inject ApiMiddleware ApiMiddleware
@inject IMessageService _message

@code {
    private CreateServiceCategorieDTO _model { get; set; } = new CreateServiceCategorieDTO();
    private Form<CreateServiceCategorieDTO>? form;
    private bool formValidate = false;

    

    private async Task ButtonAction()
    {
        try
        {
            formValidate = form.Validate();

            if (!formValidate)
            {
                _message.Warning("Form no validado");
            }
            else
            {
                _model.createdAt = DateTime.Now;
                _model.updatedAt = DateTime.Now;
                var response = await ApiMiddleware.ExecuteRequestAsync(() => ApiMethods.CreateServiceCategorie(_model));
                if (!response.IsSuccess)
                {
                    _message.Error(response.ErrorMessage);
                }
                else
                {
                    _message.Success("categoria de servicio creado con exito");
                    form.Reset();
                }
            }
        }
        catch (Exception ex)
        {
            await _message.Error(ex.Message);

        }
    }
}

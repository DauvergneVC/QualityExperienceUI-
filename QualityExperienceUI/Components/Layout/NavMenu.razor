@using QualityExperienceUI.Local.Resources.LayoutResources
@inject IStringLocalizer<LayoutRes> localizer
@inject IconService iconService
@implements IDisposable

<div class="navbar-container">
    <div class="logo-container">
        <a class="logo" href="">QualityExperienceUI</a>
        
    </div>

    <Menu DefaultSelectedKeys=@(new[] { "home" })
          Mode=MenuMode.Inline
          Theme=MenuTheme.Dark
          Class="sidebar-menu"
        Style="justify-content: left; text-align: left">

        <!-- Home -->
        <MenuItem Key="home" Icon="@IconType.Outline.Home">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                @localizer["NavLinkHome"]
            </NavLink>
        </MenuItem>

        <!-- Example pages with SubMenu -->
        <SubMenu Key="Example" Title="Example pages">
            <MenuItem Key="counter1">
                <NavLink class="nav-link" href="counter">
                    Counter
                </NavLink>
            </MenuItem>
            <MenuItem Key="counter2">
                <NavLink class="nav-link" href="weather">
                    Weather
                </NavLink>
            </MenuItem>
        </SubMenu>

        <!-- Mantenedores pages with SubMenu -->
        <SubMenu Key="Mantenedores" Title="@(localizer["NavMenuMantenedores"])" Style="justify-content: left; text-align: left">
            <MenuItem Key="Templates">
                <NavLink class="nav-link" href="/mantenedor/templates">
                    @localizer["NavLinkTemplates"]
                </NavLink>
            </MenuItem>

            <MenuItem Key="AssignUsers" Title="Assign users" Style="justify-content: left; text-align: left">
                <NavLink class="nav-link" href="counter">
                    @localizer["NavLinkAssignUsers"]
                </NavLink>
            </MenuItem>
        </SubMenu>

    </Menu>
</div>


<style>
    .navbar-container {
        height: 100vh;
        display: flex;
        flex-direction: column;
        background-color: #001529;
    }

    .logo-container {
        display: flex;
        align-items: center;
        padding: 16px;
        background-color: #001529;
        color: white;
        height: 64px;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .logo {
        color: white;
        font-size: 18px;
        font-weight: bold;
        flex-grow: 1;
        text-decoration: none;
    }

    .toggle-button {
        color: white;
    }

    .sidebar-menu {
        flex-grow: 1;
        border-right: 0;
    }

    .nav-link {
        display: block;
        width: 100%;
        height: 100%;
        color: inherit;
        text-decoration: none;
    }

    :global(.ant-menu-item-selected) {
        background-color: #1890ff !important;
    }

    :global(.ant-menu-submenu-title:hover),
    :global(.ant-menu-item:hover:not(.ant-menu-item-selected)) {
        color: white !important;
        background-color: rgba(255, 255, 255, 0.1) !important;
    }
</style>

@code {
    private bool collapsed = false;

    // Title fragments para los submenús
    private RenderFragment adminTitle =
    @<span>
        <Icon Type="@IconType.Outline.Dashboard" />
        <span>Admin Panel</span>
    </span>;

    private RenderFragment usersTitle =
    @<span>
        <Icon Type="@IconType.Outline.User" />
        <span>User Management</span>
    </span>;

    private RenderFragment reportsTitle =
    @<span>
        <Icon Type="@IconType.Outline.BarChart" />
        <span>Reports</span>
    </span>;

    private void ToggleCollapsed()
    {
        collapsed = !collapsed;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Inicializa los iconos personalizados una vez al cargar el componente
            // Solo se ejecuta después del primer renderizado, como requiere Blazor para interop JS
            await iconService.CreateFromIconfontCN("//at.alicdn.com/t/font_2735473_hi62ezq5579.js");
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public void Dispose()
    {
        // Limpieza de recursos si es necesario
    }
}
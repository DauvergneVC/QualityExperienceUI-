@* Usings and injects *@
@using QualityExperienceUI.Components.Pages.Mantenedores.Templates.Components.TabQuestionsComponents
@using QualityExperienceUI.Local.Resources.TemplatesResources.TabModel
@inject IStringLocalizer<TabModelResx> localizer
@inject IMessageService _message
@inject IQuestionsCRUD _questionsCRUD
@inject IContextFliedsCRUD _contextFieldsCRUD


@* page content *@
<h4 style="display: flex; justify-content: center; ">@localizer["TabModelTitle"]</h4>
@if(isReady)
{
    @* Collapse *@
    <Collapse>
        @foreach (var group in questions)
        {
            <Panel Key="@group.Id.ToString()">
                <HeaderTemplate>
                    <div style="display: flex; justify-content: space-between; align-items: center">
                        <span>@group.Name</span>
                        @if (HasRadioQuestions(group))
                        {

                            <RadioGroup Options="@ValuesToYesNo" @bind-Value="groupsRaddioValues[group.Id]" OnChange="@((int value) => MarcQuestions(group.Id, value))" />
                            @* @(async (string value) => await HandleQuestionRadioChange(group.Id, question.Id, value)) *@

                        }
                    </div>
                </HeaderTemplate>
                <ChildContent>
                    @foreach (var question in group.Questions ?? default!)
                    {
                        <div style="display: flex; justify-content: space-between; align-items: center; margin: 8px 0">
                            <p style="margin: 0">@question.Name</p>


                            <div>

                                @if (question.QuestionEvaluationControl?.EvaluationControl == "Radio" && question.QuestionEvaluationControl.Description == "Yes/No/NA")
                                {
                                    <RadioGroup Options="@ValuesToYesNoNa" @bind-Value="valuesSaver[group.Id][question.Id]" OnChange="@((int value) => unMarcGroups(group.Id, value))" />
                                }
                                else if(question.QuestionEvaluationControl?.EvaluationControl == "Radio")
                                {
                                    <RadioGroup Options="@ValuesToYesNo" @bind-Value="valuesSaver[group.Id][question.Id]" OnChange="@((int value) => unMarcGroups(group.Id, value))" />
                                }

                            </div>


                        </div>
                        <Divider />
                    }
                </ChildContent>
            </Panel>
        }
    </Collapse>

    @* Context in combobox *@
    <Divider Text="@localizer["TabModelContextCombosDivider"]" Orientation="DividerOrientation.Left" Type="DividerType.Horizontal" Style="margin-top: 50px" />

    <div>
        @foreach (var contextField in contextFieldsTypes)
        {
            @if(contextField.Visible == true)
            {
                @* @contextField.MaxLength *@
                <label style="max-width: 200px; overflow: hidden; text-overflow: ellipsis; white-space:nowrap">@contextField.Name</label>

                <Select DataSource="allValuesNamesOfContextTypes[contextField.Id]"
                TItemValue="string"
                TItem="string"
                EnableSearch
                Style="width: 200px"
                DefaultActiveFirstOption="false">
                    <SelectOptions>
                        @foreach (var item in allValuesNamesOfContextTypes[contextField.Id])
                        {
                            <SelectOption TItemValue="string" TItem="string" Value="@item" Label="@item" />
                        }
                    </SelectOptions>
                </Select>

                <br />
                <br />
            }
        }
    </div>

}


@code {
    

    // Reusable parameters
    [Parameter] public int templateId { get; set; }

    // General vars
    private bool isReady = false;

    // List vars
    private List<GetQuestionsByTemplateIdDTO> questions = new();

    private Dictionary<int, int> groupsRaddioValues { get; set; } = new(); // (group id, group value)
    private Dictionary<int, Dictionary<int, int>> valuesSaver { get; set; } = new();// (groupId, (questionid,value))

    private List<GetContextFieldsTypesDTO> contextFieldsTypes = new();
    private Dictionary<int, List<string>> allValuesNamesOfContextTypes = new();

    // Radio
    private RadioOption<int>[] ValuesToYesNo = new[]
    {
        new RadioOption<int> { Value = 1, Label = "Yes" },
        new RadioOption<int> { Value = 2, Label = "No" }
    };
    private RadioOption<int>[] ValuesToYesNoNa = new[]
    {
        new RadioOption<int> { Value = 1, Label = "Yes" },
        new RadioOption<int> { Value = 2, Label = "No" },
        new RadioOption<int> { Value = 3, Label = "Na" }
    };


    // Methods
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Charge data of questions
            questions = await _questionsCRUD.GetAllQuestionDataByTemplateIdAsync(templateId);


            // Charge dictionries to save values
            foreach (var group in questions)
            {
                groupsRaddioValues[group.Id] = 0;
                valuesSaver[group.Id] = new Dictionary<int, int>();

                if (group.Questions != null)
                {
                    foreach (var question in group.Questions)
                    {
                        if (IsRadioQuestion(question))
                        {
                            valuesSaver[group.Id][question.Id] = 0;
                        }
                    }
                }
            }


            // Charge data of context types and values
            contextFieldsTypes = await _contextFieldsCRUD.GetContextFieldTypesBytemplateAsync(templateId);
            // To charge dictionary with values and id
            foreach (var contextType in contextFieldsTypes)
            {
                var temporalValuesList = await _contextFieldsCRUD.GetContextFieldValuesByFieldAsync(contextType.Id);
                var ListOfNames = new List<string> ();
                foreach (var name in temporalValuesList)
                {
                    ListOfNames.Add(name.Name?? "Defaulth name");
                }
                allValuesNamesOfContextTypes.Add(contextType.Id, ListOfNames);
            }


            isReady = true;
        }
        catch (Exception ex)
        {
            await _message.Error(ex.Message);
        }
    }


    private bool IsRadioQuestion(GetQuestionsByTemplateIdDTO.QuestionResponse question)
    {
        return question.QuestionEvaluationControl?.EvaluationControl?.ToLower() == "radio";
    }

    private bool HasRadioQuestions(GetQuestionsByTemplateIdDTO group)
    {
        return group.Questions?.Any(q => IsRadioQuestion(q)) ?? false;
    }


    // Radios values change
    private void MarcQuestions (int id, int value)
    {
        for (int i = 1; i <= valuesSaver[id].Count();i++)
        {
            valuesSaver[id][i] = value;
        }
    }

    private void unMarcGroups(int groupId, int value)
    {
        if (value == 2)
        {
            groupsRaddioValues[groupId] = 2;
        }
    }
}
